import java.util.*;

public class Solution {
    public class DNode{
        int key;
        int value;
        DNode pre;
        DNode next;
    }

    private void addNode(DNode node) {
        node.pre=head;
        node.next=head.next;
        head.next.pre=node;
        head.next=node;
    }
    private void removeNode(DNode node){
        DNode pre=node.pre;
        DNode next=node.next;
        pre.next=next;
        next.pre=pre;
    }
    private void moveToHead(DNode node){
        removeNode(node);
        addNode(node);
    }
    private DNode popTail(){
        DNode res=tail.pre;
        removeNode(res);
        return res;
    }

    private HashMap<Integer, DNode>
            cache = new HashMap<Integer, DNode>();
    private int count;
    private int capacity;
    private DNode head, tail;

    public LRUCache(int capacity) {
        count=0;
        this.capacity=capacity;
        head=new DNode();
        head.pre=null;
        tail=new DNode();
        tail.next=null;
        head.next=tail;
        tail.pre=head;
    }

    public int get(int key) {
        DNode node=cache.get(key);
        if(node==null)
            return -1;
        this.moveToHead(node);
        return node.value;
    }

    public void put(int key, int value) {
        DNode node=cache.get(key);
        if(node==null)
        {
            DNode newNode=new DNode();
            newNode.key=key;
            newNode.value=value;
            cache.put(key,newNode);
            addNode(newNode);
            ++count;
            if(count>capacity)
            {
                DNode tail=popTail();
                cache.remove(tail.key);
                --count;
            }
        }
        else {
            node.value=value;
            moveToHead(node);
        }
    }
}
