class Solution {
    //Time O(n) Space O(1)
    public boolean circularArrayLoop(int[] nums) {
        int val = (int)Math.pow(10,4), setCount = 0;
        for (int i = 0; i< nums.length; i++) {
            if (nums[i] >= val) continue;
            //使用currMax来标记当前轮回的已走过数字，如果curMax大于某个curMax，则小的curMax是上一轮回，可以直接跳过
            setCount++;
            int slow = i, dir = nums[i] > 0 ? 1 : -1, currMax = val+setCount;
            while(true) {
                if (nums[slow] == currMax) {
                    return true;
                } else if (nums[slow] >= val) {
                    break;
                }
                if (isValid(nums[slow], dir)) {
                    int nextVal = nextIndex(slow, nums[slow], nums.length);
                    nums[slow] = currMax;
                    if (slow == nextVal) break;
                    slow = nextVal;
                } else {
                    break;
                }
            }
        }
        return false;
    }
    //判断当前符号是否相同，如果不相同违背题目条件，直接进入下一次轮回
    public static boolean isValid(int num, int dir) {
        return num*dir > 0 ? true : false;
    }
    //获取跳跃后下一个数组下面
    public static int nextIndex(int currIndex, int steps, int length) {
        steps = steps % length;
        steps = (steps + length) % length;
        return (currIndex + steps) % length;
    }
}
