class Solution {
    //Time O(3n) Space O(n)
    public Node copyRandomList(Node head) {
        if(head==null) return head;
        Node cur=head;
        while(cur!=null)
        {
            Node next=cur.next;
            cur.next=new Node(cur.val);
            cur.next.next=next;
            cur=next;
        }
        cur=head;

        while(cur!=null)
        {
            if(cur.random!=null)
                cur.next.random=cur.random.next;
            cur=cur.next.next;
        }
        cur=head;

        Node dummy=new Node(0);//新链表的头部
        Node prev=dummy,cloneCur;//prev是新链表的前一个节点，cloneCur是当前的节点
        while(cur!=null)
        {
            Node next=cur.next.next;

            cloneCur=cur.next;
            prev.next=cloneCur;
            prev=cloneCur;

            cur.next=next;
            cur=next;
        }
        return dummy.next;
    }

}
