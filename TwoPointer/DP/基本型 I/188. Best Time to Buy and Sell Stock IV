class Solution {
    // Time O(n*k) if 2k<=n,O(n) if 2k>n Space O(n*k)   n is the length of prices
    public int maxProfit(int k, int[] prices) {
        if(prices.length==0||prices.length==1) return 0;
        if(k==0) return 0;
        int dp[];
        if(prices.length>2*k)
            dp=new int[2*k];
        else dp=new int[prices.length/2*2];
        for(int i=0;i<dp.length;i+=2)
        {
            dp[i]=Integer.MIN_VALUE;
        }

        for(int i=0;i<prices.length;++i)
        {
            int j=2;
            dp[0]=Math.max(-prices[i],dp[0]);
            dp[1]=Math.max(prices[i]+dp[0],dp[1]);
            while(j<dp.length)
            {
                dp[j]=Math.max(dp[j-1]-prices[i],dp[j]);
                dp[j+1]=Math.max(prices[i]+dp[j],dp[j+1]);
                j+=2;
            }
        }
        int max=Integer.MIN_VALUE;
        for(int i=1;i<dp.length;i+=2)
        {
            max=Math.max(dp[i],max);
        }
        return max;
    }
}
