class Solution {
    //Time O(n) Space O(n)
    /*
              i+1 house
rob            dp[i-1]+value[i+1]
Not rob        dp[i]

     */
    public int rob(int[] nums) {
        if(nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        if(nums.length==2) return Math.max(nums[0],nums[1]);
        int dp[]=new int[nums.length];
        dp[0]=nums[0];dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<nums.length;++i)
        {
            dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);
        }
        return dp[nums.length-1];
    }
    //Optimized Space O(1)
    public int rob(int[] nums) {


        int prev1=0,prev2=0;
        for(int i=0;i<nums.length;++i)
        {
            int temp=prev1;//current i  prev1=i-1
            prev1=Math.max(prev2+nums[i],prev1);//prev2=i-2
            prev2=temp;//Not to rob

        }
        return prev1;
    }
}
