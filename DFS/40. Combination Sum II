public class Solution {
    /*
    Time O(2^n) Space O(n)
     */
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<Integer> path=new ArrayList<>();
        List<List<Integer>> res=new ArrayList<>();
        backtrack(candidates,target,0,path,res);
        return res;
    }
    public void backtrack(int[] candidates,int target,int curIndex,List<Integer> path,List<List<Integer>> res){
        if(target==0)
        {
            res.add(new ArrayList<>(path));
            return;
        }
        else if(target<0)
        {
            return;
        }
        else {
            for(int i=curIndex;i<candidates.length;++i)
            {
                if(i>curIndex&&candidates[i]==candidates[i-1])
                {
                    continue;
                }
                //添加元素到路径中
                path.add(path.size(),candidates[i]);
                //dfs
                backtrack(candidates,target-candidates[i],i+1,path,res);
                //该段搜索完毕，进行回溯，移除在数组中添加的元素
                path.remove(path.size()-1);
            }
        }
    }
}
