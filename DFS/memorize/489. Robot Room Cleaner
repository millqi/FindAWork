interface Robot {
      // Returns true if the cell in front is open and robot moves into the cell.
           // Returns false if the cell in front is blocked and robot stays in the current cell.
              public boolean move();

              // Robot will stay in the same cell after calling turnLeft/turnRight.
              // Each turn will be 90 degrees.
              public void turnLeft();
              public void turnRight();

              // Clean the current cell.
              public void clean();
  }
public class Solution {
    private static final int[][] directions={{-1,0},{0,1},{1,0},{0,-1}};//左 上 右 下
    public void cleanRoom(Robot robot) {
        dfs(robot,0,0,0,new HashSet<>());
    }
    private void dfs(Robot robot, int x, int y, int curDirection, Set<String> visited)
    {
        robot.clean();
        visited.add(x+" "+y);

        for(int dir=curDirection;dir<curDirection+4;++dir)
        {
            int newX=directions[dir%4][0]+x;
            int newY=directions[dir%4][1]+y;
            if(!visited.contains(newX+" "+newY)&&robot.move())
            {
                dfs(robot,newX,newY,dir%4,visited);
            }
        }
        //DFS回溯 执行完当前分支，回退一步
        robot.turnRight();
        robot.turnRight();
        robot.move();
        robot.turnRight();
        robot.turnRight();
    }

}
