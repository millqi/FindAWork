class Solution {
    /*
    Time O(nlogn) Space O(n+logN)
     */
    public int countRangeSum(int[] nums, int lower, int upper) {
        long sums[]=new long[nums.length+1];
        for(int i=0;i<nums.length;++i)
        {
            sums[i+1]=sums[i]+nums[i];
        }
        return countWhileMergeSort(sums,0,sums.length,lower,upper);
    }
    /*
    0 -2 3 2        upper 2  lower -2
    mid 2
    02  24
    01 12  23  34
    02
    1  2   2  2
     */
    private int countWhileMergeSort(long[] sums,int start,int end,int lower,int upper){
        if(end-start<=1) return 0;
        int mid=start+(end-start)/2;
        int count=countWhileMergeSort(sums,start,mid,lower,upper)+countWhileMergeSort(sums,mid,end,lower,upper);
        long[] cache=new long[end-start];
        int lowIndex=mid,highIndex=mid,copyIndex=mid;
        for(int i=start,cacheIndex=0;i<mid;++i,++cacheIndex)
        {
            while(lowIndex<end&&sums[lowIndex]-sums[i]<lower)
            {
                ++lowIndex;
            }
            while(highIndex<end&&sums[highIndex]-sums[i]<=upper)
            {
                ++highIndex;
            }
            while(copyIndex<end&&sums[copyIndex]<sums[i])
            {
                cache[cacheIndex++]=sums[copyIndex++];
            }
            cache[cacheIndex++]=sums[i];
            count+=highIndex-lowIndex;
        }
        System.arraycopy(cache,0,sums,start,copyIndex-start);
        return count;
    }
}
