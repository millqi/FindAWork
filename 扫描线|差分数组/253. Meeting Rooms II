public class Solution {
    //Time O(nlogn) 需要先排序logN 然后O(n)扫描 Space O(1)
    public int minMeetingRooms(int[][] intervals) {
        int starts[] =new int[intervals.length];
        int ends[] =new int[intervals.length];
        for(int i=0;i<intervals.length;++i)
        {
            starts[i]=intervals[i][0];
            ends[i]=intervals[i][1];
        }
        Arrays.sort(starts);
        Arrays.sort(ends);

        int rooms=0;
        for(int i=0,endIndex=0;i< starts.length;++i)
        {
            if(starts[i]>ends[endIndex])
            {
                ++rooms;
            }
            else {
                ++endIndex;
            }
        }
        return rooms;
    }
    //通用模板

    public int minMeetingRooms(int[][] intervals) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i=0;i< intervals.length;++i) {
            map.put(intervals[i][0], map.getOrDefault(intervals[i][0], 0) + 1);
            map.put(intervals[i][1], map.getOrDefault(intervals[i][1], 0) - 1);
        }
        int room = 0, k = 0;
        for (int v : map.values())
            k = Math.max(k, room += v);

        return k;
    }
}
