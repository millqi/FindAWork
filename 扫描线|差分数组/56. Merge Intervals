public class Solution {
    //Time O(nlogn) logn是红黑树排序 n是遍历map  Space O(2n)-> 需要在红黑树中储存原数组中的值
    public int[][] merge(int[][] intervals) {
        Map<Integer,Integer> map=new TreeMap<>();
        for(int i=0;i<intervals.length;++i)
        {
            map.put(intervals[i][0],map.getOrDefault(intervals[i][0],0)+1);
            map.put(intervals[i][1],map.getOrDefault(intervals[i][1],0)-1);
        }
        //新建临时变量 start记录当前子区域的开头, cur用于会议的计数，当cur重新回到0时，则说明start到cur这个区间可以融合
        LinkedList<int[]> temp=new LinkedList<>();
        int start=0,cur=0;
        for(Map.Entry<Integer,Integer> e: map.entrySet())
        {
            if(cur==0)
            {
                start=e.getKey();
            }
            if((cur+=e.getValue())==0)
            {
                temp.add(new int[]{start,e.getKey()});
            }
        }
        return temp.toArray(new int[temp.size()][]);
    }
}
