class Solution {
    //Time O(n) Space O(n) n是格子数目
    public boolean isValidSudoku(char[][] board) {
        Set<String> seen=new HashSet<>();
        for(int i=0;i<board.length;++i){
            for(int j=0;j<board[0].length;++j){
                if(board[i][j]!='.'){
                    if(!seen.add(board[i][j]+"in row"+i)||!seen.add(board[i][j]+"in col"+j)||!seen.add(board[i][j]+"in block"+i/3+"-"+j/3)){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    //更快
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++){
            boolean[] row = new boolean[9];
            boolean[] col = new boolean[9];
            boolean[] cell = new boolean[9];

            for (int j = 0; j < 9; j++){
                //i表示行，j表示列，检查行，从上到下，每次一行
                if (board[i][j] != '.'){
                    if (row[board[i][j] - '1']){
                        return false;
                    }
                    row[board[i][j] - '1'] = true;
                }

                //从左到右，每次一列
                if (board[j][i] != '.'){
                    if(col[board[j][i] - '1']){
                        return false;
                    }
                    col[board[j][i] - '1'] = true;
                }

                //方块先从左到右，再从上到下
                int boxX = (i / 3) * 3;//方块的x轴，当x大于2，移到第二行
                int boxY = (i % 3) * 3;
                //boxX Y是方块的左上角格子坐标，加上j就是局部的方块左边位置
                if (board[boxX + j/3][boxY + j % 3] != '.'){
                    if (cell[board[boxX + j/3][boxY + j % 3] - '1']){
                        return false;
                    }
                    cell[board[boxX + j/3][boxY + j % 3] - '1'] = true;
                }

            }
        }
        return true;
    }
}
