public class Solution {
    //Time O(n) 因为有n个节点 Space O(n) 队列要存放n个节点
    List<List<Integer>> res= new ArrayList<>();
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if(root==null) return res;
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);

        while(!queue.isEmpty())
        {
            List<Integer> temp=new ArrayList<>();
            int count=queue.size();
            while(count>0&&!queue.isEmpty())
            {
                TreeNode cur=queue.poll();
                --count;
                temp.add(cur.val);
                if(cur.left!=null) {
                    queue.offer(cur.left);
                }
                if(cur.right!=null) {
                    queue.offer(cur.right);
                }
            }
            res.add(0,temp);
        }
        return res;
    }
    //Time O(n) 因为有n个节点 Space O(n) 函数栈要存放n个节点
    //Res结果数组应该使用LinkedList
    public List<List<Integer>> levelOrder2(TreeNode root) {
        recursion(root,0);
        return res;
    }
    public void recursion(TreeNode root,int level)
    {
        if(root==null) return;
        if(level>=res.size())
            res.add(0,new ArrayList<>());
        res.get(res.size()-level-1).add(root.val);
        recursion(root.left,level+1);
        recursion(root.right,level+1);
    }
}
