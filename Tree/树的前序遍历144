public class Solution {
    //Time O(n) Space O(n) 因为需要把整棵树存起来
    List<Integer> res=new ArrayList<>();
    //递归
    public List<Integer> preorderTraversal(TreeNode root) {
        preorder(root);
        return res;
    }
    public void preorder(TreeNode root)
    {
        if(root==null) return;
        res.add(root.val);
        preorder(root.left);
        preorder(root.right);
    }
    //遍历
    public List<Integer> preorderTraversal2(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        TreeNode cur;
        if(root!=null)
        {
            stack.push(root);
        }
        while(!stack.isEmpty())
        {
            cur=stack.pop();
            res.add(cur.val);
            if(cur.right!=null) stack.add(cur.right);
            if(cur.left!=null) stack.add(cur.left);
        }
        return res;
    }
    //遍历 只有右孩子可以存入栈中
    public List<Integer> preorderTraversal3(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        TreeNode cur=root;
        if(root!=null)
        {
            stack.push(root);
        }
        while(!stack.isEmpty())
        {
            res.add(cur.val);
            if(cur.right!=null) stack.add(cur.right);
            cur=cur.left;
            if(cur==null&&!stack.isEmpty())
            {
                cur=stack.pop();
            }
        }
        return res;
    }
    //Morris  Time O(N)| Space O(1) Optimized 如果算上储存结果的数组，则为O(N)
    public List<Integer> morrisTransversal(TreeNode root)
    {
        TreeNode cur=root;
        while(cur!=null)
        {
            if(cur.left==null)
            {
                res.add(cur.val);
                cur=cur.right;
            }
            else {
                TreeNode pre=cur.left;
                while(pre.right!=null&&pre.right!=cur)//找到根节点左子树的最右边的叶子节点
                {
                    pre=pre.right;
                }
                if(pre.right==null)//将最右边叶子节点连向根节点cur
                {
                    res.add(cur.val);
                    pre.right=cur;
                    cur=cur.left;
                }
                else {//此时cur已经在根节点，需要向右前进，同时将根节点的左子树的 最右边的叶子节点与根节点的链接拆除
                    pre.right=null;
                    cur=cur.right;
                }

            }
        }
        return res;
    }
}
