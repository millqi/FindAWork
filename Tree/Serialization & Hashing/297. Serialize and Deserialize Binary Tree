public class Codec {
    //Time O(n) Space O(n)
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "";
        Queue<TreeNode> queue=new LinkedList<>();
        StringBuilder serialized=new StringBuilder();
        queue.add(root);
        while(!queue.isEmpty())
        {
            TreeNode cur=queue.poll();
            if(cur==null)
            {
                serialized.append("N ");
                continue;
            }
            serialized.append(cur.val+" ");
            queue.add(cur.left);
            queue.add(cur.right);
        }
        return serialized.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals("")) return null;
        Queue<TreeNode> queue=new LinkedList<>();
        String[] nodes=data.split(" ");
        TreeNode root=new TreeNode(Integer.parseInt(nodes[0]));
        queue.add(root);
        for(int i=1;i<nodes.length;++i)
        {
            TreeNode parent=queue.poll();
            if(!nodes[i].equals("N"))
            {
                TreeNode left=new TreeNode(Integer.parseInt(nodes[i]));
                parent.left=left;
                queue.add(left);
            }
            if(!nodes[++i].equals("N"))
            {
                TreeNode right=new TreeNode(Integer.parseInt(nodes[i]));
                parent.right=right;
                queue.add(right);
            }
        }
        return root;
    }
    //递归
    private static final String DELIMITER = ",";
    private static final String END = "#";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        buildString(root, sb);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] data_array = data.split(DELIMITER);
        Queue<String> data_list = new LinkedList<String>(Arrays.asList(data_array));
        return buildTree(data_list);
    }


    private void buildString(TreeNode node, StringBuilder sb){
        if (node == null) {
            sb.append(END).append(DELIMITER);
        } else{
            sb.append(node.val).append(DELIMITER);
            buildString(node.left, sb);
            buildString(node.right, sb);
        }
    }

    private TreeNode buildTree(Queue<String> l){
        String token = l.poll();
        if (token.equals(END)) return null;
        TreeNode node = new TreeNode(Integer.valueOf(token));
        node.left = buildTree(l);
        node.right = buildTree(l);
        return node;
    }
}
