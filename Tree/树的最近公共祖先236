public class Solution {
    //递归 Time O(n)最多要遍历完所有节点 Space O(n)函数栈最多存放所有节点（单边树最后两个节点）
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null||root==p||root==q)
        {
            return root;
        }
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left==null)
        {
            return right;
        }
        else if(right==null)
        {
            return left;
        }
        else {
            return root;
        }
    }
    //将每个节点与它的祖先存入hashmap中，使用bfs进行层序遍历，当hashmap包含两个节点之后，结束循环。
    // 同时将根节点到p之间的节点存入set中，将q不断往根节点移动，当q在set中时，该节点就是最近公共祖先
    public TreeNode lowestCommonAncestor2(TreeNode root, TreeNode p, TreeNode q) {
        Map<TreeNode,TreeNode> parents=new HashMap<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        parents.put(root,null);
        while(!parents.containsKey(p)||!parents.containsKey(q))
        {
            TreeNode cur=queue.poll();
            if(cur.left!=null)
            {
                queue.add(cur.left);
                parents.put(cur.left,cur);
            }
            if(cur.right!=null)
            {
                queue.add(cur.right);
                parents.put(cur.right,cur);
            }
        }
        Set<TreeNode> ancestors=new HashSet<>();
        while(p!=null)
        {
            ancestors.add(p);
            p=parents.get(p);
        }
        while(!ancestors.contains(q))
        {
            q=parents.get(q);
        }
        return q;
    }
}
