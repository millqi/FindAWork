public class Solution {
    //从上到下 Time O(n) Space O(n)最差情况链表 平均情况O(logN)
    private boolean result=true;
    public boolean isBalanced(TreeNode root) {
        dfs(root,0);
        return result;
    }
    public int dfs(TreeNode root,int level)
    {
        if(root==null||result==false) return level-1;
        int left=dfs(root.left,level+1);
        int right=dfs(root.right,level+1);
        if(Math.abs(left-right)>1)
            result=false;
        return Math.max(left,right);
    }
    //从下到上。优化，不需两个参数的函数
    public int dfs(TreeNode root)
    {
        if(root==null) return 0;
        int left=dfs(root.left);
        if(left==-1) return -1;
        int right=dfs(root.right);
        if(right==-1) return -1;
        if(Math.abs(left-right)>1)
            return -1;
        return Math.max(left,right)+1;
    }

}
