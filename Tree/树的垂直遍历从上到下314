public class Solution {
    //Time O(n) 因为有n个节点 Space O(3n) 两个队列要存放n个节点，一个map存放列数
    //层序遍历BFS
    //使用一个队列来记录一个节点的列数，一个队列来实现BFS，map用来记录node的列数
    List<List<Integer>> res= new ArrayList<>();
    public List<List<Integer>> verticalOrder(TreeNode root) {
        if(root==null) return res;
        Queue<Integer> columns=new LinkedList<>();
        Queue<TreeNode> nodes=new LinkedList<>();
        columns.add(0);
        nodes.add(root);

        int min=0,max=0;
        HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();
        while(!nodes.isEmpty())
        {
            TreeNode cur=nodes.poll();
            int col=columns.poll();

            map.putIfAbsent(col,new ArrayList<>());

            map.get(col).add(cur.val);

            if(cur.left!=null)
            {
                nodes.add(cur.left);
                columns.add(col-1);
                min=Math.min(col-1,min);
            }
            if(cur.right!=null)
            {
                nodes.add(cur.right);
                columns.add(col+1);
                max=Math.max(col+1,max);
            }
        }
        for(int i=min;i<=max;++i)
        {
            res.add(map.get(i));
        }
        return res;
    }
    //优化 不适用map
    int min=0,max=0;
    public List<List<Integer>> verticalOrder2(TreeNode root) {
        if(root==null) return res;
        Queue<Integer> columns=new LinkedList<>();
        Queue<TreeNode> nodes=new LinkedList<>();
        nodes.add(root);

        /*
        这样搜寻有可能左子树有一个很长的右子树，而根节点无右子树，导致index out of range

        int left=0,right=0;
        while(cur.left!=null)
        {
            ++left;
            cur=cur.left;
        }
        cur=root;
        while(cur.right!=null)
        {
            ++right;
            cur=cur.right;
        }
        for(int i=0;i<left+right+1;++i)
        {
            res.add(new ArrayList<>());
        }
        */
        computeRange(root,0);
        for(int i=min;i<=max;++i)
        {
            res.add(new ArrayList<>());
        }
        columns.add(-min);

        while(!nodes.isEmpty())
        {
            TreeNode temp=nodes.poll();
            int col=columns.poll();
            res.get(col).add(temp.val);
            if(temp.left!=null)
            {
                nodes.add(temp.left);
                columns.add(col-1);
            }
            if(temp.right!=null)
            {
                nodes.add(temp.right);
                columns.add(col+1);
            }
        }

        return res;
    }
    private void computeRange(TreeNode root, int idx){
        if(root == null)    return;
        min = Math.min(min, idx);
        max = Math.max(max, idx);
        computeRange(root.left, idx - 1);
        computeRange(root.right, idx + 1);
    }
    //错误算法 前序遍历会在递归时 导致左子树下面的节点先被添加到数组中，导致右子树上面的节点后被添加
    public List<List<Integer>> verticalOrder_Wrong(TreeNode root) {
        if(root==null) return res;
        TreeNode cur=root;
        int left=0;
        int right=0;
        while(cur.left!=null) {
            cur = cur.left;
            ++left;
        }
        cur=root;
        while(cur.right!=null)
        {
            cur=cur.right;
            ++right;
        }
        for(int i=0;i<left+right+1;++i)
        {
            res.add(new ArrayList<>());
        }
        recursion(root,left);
        return res;
    }
    public void recursion(TreeNode root,int level)
    {
        res.get(level).add(root.val);
        if(root.left!=null)
            recursion(root.left,level-1);
        if(root.right!=null)
            recursion(root.right,level+1);
    }
}
