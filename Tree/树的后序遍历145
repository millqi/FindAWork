public class Solution {
    //遍历与递归 Time O(n) Space O(n)
    List<Integer> res=new LinkedList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        recursion(root);
        return  res;
    }
    public void recursion(TreeNode root) {
        if(root==null) return;
        recursion(root.left);
        recursion(root.right);
        res.add(root.val);
    }
    public List<Integer> postorderTraversal2(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        if(root==null) return res;
        stack.push(root);
        TreeNode cur;
        while(!stack.isEmpty())
        {
            cur=stack.pop();
            res.add(0,cur.val);
            if(cur.left!=null)
            {
                stack.push(cur.left);
            }
            if(cur.right!=null)
            {
                stack.push(cur.right);
            }
        }
        return  res;
    }

    //Time O(n) Space O(1) 如果算上结果储存数组O(n)
    public List<Integer> morrisTransversal(TreeNode root) {
        TreeNode dump=new TreeNode(0);
        dump.left=root;
        TreeNode cur=dump;
        while(cur!=null)
        {
            if(cur.left==null)
            {
                cur=cur.right;
            }
            else{
                TreeNode pre=cur.left;
                while(pre.right!=null&&pre.right!=cur)
                {
                    pre=pre.right;
                }
                if(pre.right==null)
                {
                    pre.right=cur;
                    cur=cur.left;
                }
                else {
                    printReverse(cur.left,pre);
                    pre.right=null;
                    cur=cur.right;
                }
            }
        }
        return res;
    }
    //反转链表算法，将cur.left到pre的节点之间反转
    public void reverse(TreeNode from,TreeNode to)
    {
        if(from==to)
        {
            return;
        }
        TreeNode oldHead=from,newHead=from.right,next;
        while(oldHead!=to)
        {
            next=newHead.right;
            newHead.right=oldHead;
            oldHead=newHead;
            newHead=next;
        }
    }
    public void printReverse(TreeNode from,TreeNode to){
        reverse(from,to);
        //反转之后在底部一直打印数据
        TreeNode cur=to;
        while(true)
        {
            res.add(cur.val);
            if(from==cur) break;
            cur=cur.right;
        }
        reverse(to,from);
    }
}
