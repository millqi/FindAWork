public class Solution {
    class Node {
        public int val;
        public Node left;
        public Node right;
        public Node parent;
    }
    //Same Question LeetCode 160
    //Time O(n) n 为 最低节点的高度 Space O(1)
    public Node lowestCommonAncestor(Node p, Node q) {
        Node a=p,b=q;
        while(a!=b)
        {
            //a离公共节点有2步 b离公共节点有1步
            //公共节点与根节点后面总共一步  a走3步一个轮回 b走2步一个轮回 总共a走两个轮回就会与b同步
            /*
            1 - 2
                    4- 5
            3
             */
            a= a==null?p:a.parent;//
            b= b==null?q:b.parent;
        }
        return a;
    }
    //先求两个节点的高度，求出它们的间隔距离，将更高的一个节点先往上移动该距离，然后两个节点会处在同一层，当他们不是同一节点时，往上一层移动，最后一定会相同。
    public Node lowestCommonAncestor(Node p, Node q) {
        // Time Complexity: O(log(N))
        // Space Complexity: O(1)
        
        if (p == q) {
            return p;
        }
        
        int heightP = heightOfNode(p);
        int heightQ = heightOfNode(q);
        
        Node deeperNode = heightP > heightQ ? p : q;
        Node shallowerNode = heightP > heightQ ? q : p;
        
        int gap = Math.abs(heightP - heightQ);
        while (gap > 0) {
            deeperNode = deeperNode.parent;
            gap--;
        }
        
        if (deeperNode == shallowerNode) {
            return deeperNode;
        }
        
        while (deeperNode != shallowerNode) {
            deeperNode = deeperNode.parent;
            shallowerNode = shallowerNode.parent;
        }
        return deeperNode;
    }
    
    private int heightOfNode(Node node) {
        int height = 0;
        while (node != null) {
            node = node.parent;
            height++;
        }
        return height;
    }
}
