public class Solution {
    //Time O(logN) Space O(1)
    public int search(int[] nums, int target) {
        int left=0,right=nums.length-1,mid;
        while (left<right)
        {
            mid = left+(right-left)/2;
            if (nums[mid]==target) return mid;//剪枝提前判断
            // mid target在同一个区段
            //[4,5,6,7,0,1,2]     [7,0,1,2,4,5,6]
            //target 5            target 1
            if (nums[left]<=nums[mid] && nums[left]<=target || nums[left]>nums[mid] && nums[left]>target) //在同一个区段
            {
                if (target<nums[mid])
                    right = mid;
                else
                    left = mid+1;
            }
            //mid target在不同区段
            //[4,5,6,7,0,1,2]     [5,6,7,0,1,2,4]
            //target 1            target 6
            else if (nums[left]<=nums[mid] && nums[left]>target) //left和mid是原数组的后半部分，target是在较小的前半部分
                left = mid+1;
            else if (nums[left]>nums[mid] && nums[left]<=target) //left、target是在后半部分 mid在前半部分
                right = mid;
        }
        return nums[left]==target?left:-1;//当数组长度是一的时候，不会经过循环
    }
}
