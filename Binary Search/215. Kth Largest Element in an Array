class Solution {
    //Time O(NlogN)建堆N，调整堆需要logN Space O(logN)使用栈空间的代价
    public int findKthLargest(int[] nums, int k) {
        //4 2 3 1 5
        int heapSize=nums.length;
        buildMaxHeap(heapSize,nums);
        for(int i=nums.length-1;i> nums.length-k;--i)
        {
            int temp=nums[0];
            nums[0]=nums[i];
            nums[i]=temp;
            --heapSize;
            maxHeapify(nums,heapSize,0);
        }
        return nums[0];
    }
    public void buildMaxHeap(int heapSize,int nums[])
    {
        for(int i=heapSize/2;i>=0;--i)
        {
            maxHeapify(nums,heapSize,i);
        }
    }
    public void maxHeapify(int nums[],int heapSize,int i)
    {
        int left=i*2+1,right=i*2+2,largest=i;
        if(left<heapSize&&nums[left]>nums[largest])
        {
            largest=left;
        }
        if(right<heapSize&&nums[right]>nums[largest])
        {
            largest=right;
        }
        if(largest!=i)
        {
            int temp=nums[i];
            nums[i]=nums[largest];
            nums[largest]=temp;
            maxHeapify(nums,heapSize,largest);
        }
    }
    
    
    //快速排序 Time O(n) avg   O(n^2) at worst  Space O(logN) functionStack
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) return Integer.MAX_VALUE;
        shuffle(nums);
        return findKthLargest(nums, 0, nums.length - 1, nums.length - k);
    }
    public int findKthLargest(int[] nums, int start, int end, int k) {
        if(start>end) return Integer.MAX_VALUE;
        int pivot=nums[end];
        int left=start;
        for(int i=start;i<end;++i)
        {
            if(nums[i]<=pivot)
            {
                swap(nums,left,i);
                ++left;
            }
        }
        swap(nums,left,end);
        if(left==k)
            return nums[left];
        else if(left<k)//索引值小于k
        {
            return findKthLargest(nums,left+1,end,k);
        }
        else { //索引值大于k
            return findKthLargest(nums,start,left-1,k);
        }
    }
    private void shuffle(int a[]) {

        final Random random = new Random();
        for(int ind = 1; ind < a.length; ind++) {
            final int r = random.nextInt(ind + 1);
            swap(a, ind, r);
        }
    }
    void swap(int[] A, int i, int j) {
        int tmp = A[i];
        A[i] = A[j];
        A[j] = tmp;
    }

}
