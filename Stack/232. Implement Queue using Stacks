/*
两个栈，Push O(1)
Pop O(n)
弹出时先将所有元素压到栈2
然后栈2头部就是最初插入的元素，弹出后再压回stack1
 */
class MyQueue {
    Stack<Integer> stack1;
    Stack<Integer> stack2;
    public MyQueue() {
        stack1=new Stack<>();
        stack2=new Stack<>();
    }

    public void push(int x) {
        stack1.add(x);
    }

    public int pop() {
        while(!stack1.isEmpty())
        {
            stack2.add(stack1.pop());
        }
        int res=stack2.pop();
        while(!stack2.isEmpty())
        {
            stack1.add(stack2.pop());
        }
        return res;
    }

    public int peek() {
        while(!stack1.isEmpty())
        {
            stack2.add(stack1.pop());
        }
        int res=stack2.peek();
        while(!stack2.isEmpty())
        {
            stack1.add(stack2.pop());
        }
        return res;
    }

    public boolean empty() {
        return stack1.isEmpty();
    }
}
/*
两个栈
Push O(n)
先把stack1元素全部放入stack2
将新元素放入stack1底，再将stack2所有元素放入stack1中
Pop O(1)
保持着stack1头部是最初插入的元素
 */
class MyQueue {
    Stack<Integer> stack1;
    Stack<Integer> stack2;

    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    public void push(int x) {
        while(!stack1.isEmpty())
        {
            stack2.add(stack1.pop());
        }
        stack1.add(x);
        while(!stack2.isEmpty())
        {
            stack1.add(stack2.pop());
        }
    }

    public int pop() {
        return stack1.pop();
    }

    public int peek() {
        return stack1.peek();
    }

    public boolean empty() {
        return stack1.isEmpty();
    }
}
